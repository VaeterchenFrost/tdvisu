# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

on:
  push:
    branches: [master]
    paths-ignore:
      - "doc/**"
      - "gh-disabled-workflows/**"
      - "*.md"
  pull_request:
    branches: [master]
    paths-ignore:
      - "doc/**"
      - "gh-disabled-workflows/**"
      - "*.md"

env:
  graphviz-version: "12.2.1"
  pg-version: "16"

jobs:
  linux_and_coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Graphviz
        working-directory: ..
        run: |
          wget -nv "https://gitlab.com/api/v4/projects/4207231/packages/generic/graphviz-releases/${{ env.graphviz-version }}/graphviz-${{ env.graphviz-version }}.tar.gz"
          graphviz_12_sha256="242bc18942eebda6db4039f108f387ec97856fc91ba47f21e89341c34b554df8  graphviz-${{ env.graphviz-version }}.tar.gz"
          if [[ "$(sha256sum graphviz-${{ env.graphviz-version }}.tar.gz)" != "$graphviz_12_sha256" ]]; then
            echo "The file is corrupted, calculated_hash: $calculated_hash"
            exit 1
          fi
          # extract
          tar -xzf graphviz-${{ env.graphviz-version }}.tar.gz
          # dev dependencies
          sudo apt-get install -y build-essential pkg-config libgraphviz-dev libperl-dev libsodium-dev libargon2-dev libgts-dev

      - name: Install Graphviz
        working-directory: ..
        run: |
          cd graphviz-${{ env.graphviz-version }}
          ./configure --prefix=$PWD/out --with-gts
          make --quiet
          make install --quiet
          echo "$PWD/out/bin" >> "$GITHUB_PATH"
          echo "LD_LIBRARY_PATH=$PWD/out/lib" >> "$GITHUB_ENV"

      - name: Install Workflow dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install flake8 flake8-import-order pytest coverage

      - name: Install project dependencies
        run: |
          pip install .[test]

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with coverage & pytest
        run: |
          dot -V
          which coverage
          which dot
          which pytest
          coverage run --source=tdvisu -m pytest .
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: unittests

  other_os_tests:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install workflow dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel

      - name: Brew install PostgreSQL ${{ env.pg-version }}
        if: runner.os == 'MacOS'
        run: |
          brew install libpq postgresql@${{ env.pg-version }}
          # make available on PATH
          pgpath="/opt/homebrew/opt/postgresql@${{ env.pg-version }}/bin"
          echo $pgpath >> "$GITHUB_PATH"
          ls "$pgpath"
          $pgpath/pg_config --version

      - name: Add PostgreSQL to PATH
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "$env:PGBIN" >> "$env:GITHUB_PATH"
          pg_config --version

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v2
        with:
          macos-skip-brew-update: "true" # default false
          windows-graphviz-version: ${{ env.graphviz-version }}

      - name: Register plugins for Graphviz
        if: runner.os == 'Windows'
        run: |
          dot -V
          dot -c

      - name: Install project dependencies
        run: |
          pip install .[test]

      - name: Test with pytest
        run: |
          # Tests reside in folder 'test'
          pytest ./test
